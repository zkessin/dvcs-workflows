== Using Git

For developers who are used to centralized version control systems
like CVS or SVN transitioning to GIT requires a bit of a mental
transition. Unlike SVN a commit in git is a two phase operation. When
you do a *git commit* you are committing to your local repository. It
does not publish those changes to anyone else. This has several
benefits, first of all you can commit work in progress without woring
about "breaking the build" so if you may want to roll back some
changes you can commit to a branch on your local repository.  It also
means that you do not need Internet access to commit to your local
repository. So if you are say writing a book on your laptop while on
an international flight (which is where this is being written) you can
check in your changes to a local repository and then push them to a
shared repository later when you flight lands.

This chapter is not a full introduction to git. There are several
excellent books on that including _Version Control with Git_ by Jon
Loeliger and McCullough which is published by O'Reilly. That book is
an excellent introduction to git. In addition there are several other
books out there as well as videos which can be found on sites like
youtube and infoq.

In addition this chapter assumes the use of git from a command shell
such as bash. For those who are happy using a command line this can be
a very productive way to work. But do not assume that it is the only
way to work with GIT or even the "correct" way. The command line is an
effective way to work, but so are a number of Graphical git clients
which are covered in xref:git_gui[GUI Git Front Ends]. Use which ever
makes most sense to you. In addition it is quite possible to use both
the command line and one or more graphical tools.

When building this book I have been using command line git tool, and
the Emacs git interface and the GitHub for mac program. In this case
I used the emacs client for most commits and the GitHub for Mac for
handling pushing and branches.  

=== Creating a repository

To create a repository use the command *git init* which will
initialize an empty git repository.  Once a repository has been
created files can be added to it and all other operations performed.

The other way to create a repository is by doing it with GitHub or
other remote hosting service. Once you create the repository on GitHub
you then clone the repository onto your local computer.  


=== Basic Operations

The first thing you will wish to do after creating a new repository is add
some files for it to track. A repository without any files is not
particularly useful, anymore than any other file system without files.

To add files use the command *git add <file>* you can also add more
than one file or a directory structure in one command line. 


==== Committing Changes

Once you have added files to a repository you will need to commit
changes that have been made.  to do this you use *git commit*. Git
will open an editor to let you create a commit message. If you want to
supply one on the command line use *git commit -m "My Commit Message"
file*.

WARNING: unlike CVS and SVN if you do a commit in a subdirectory it
will commit all files in the repository, not just those in the current
repository.


==== Branching and Merging

Git makes dealing with branches much easier than svn or the like. Many
git users will create a new branch for each feature. This also allows
you to easily throw away changes did work well by simply abandoning
the branch.

To create a branch use *git branch <branchname>* this will create a new
branch, however it will not change repository to the new branch, do do
that do *git checkout <branchname>*. Then edit and commit files as
normal.

A git branch can exist on the local repository only, or on a remote
repository. Clearly some branches such as a throw away experiment in
the code probably will only exist on a local repository. On the other
hand a feature branch may well exist on both local and remote
repositories. (The details of this will depend on how the team chooses
to do things)

NOTE: TODO how to make a remote branch

When you wish to integrate the changes from a branch into the master
branch do "git checkout master", which will bring you back to the
master branch. To bring the changes from your branch into the master
branch back do *git merge branchname* which will copy everything into
the master branch.

In the case we have just covered the master branch has not changed
while development was moving on the side branch. So at all git has to
do is what called a "fast-forward" where it can simply move the
master branch ahead so that the current pointer for the repository
points to the head commit for the branch.

In the case where two branches are being merged where one is not a
direct ancestor of the other then git will have to do its best to
merge the two groups of files. If there is direct conflict then it
will force the user to figure it out.

===== Conventions for Branching

Once again there is no one single convention for how to use
branches. Some groups will use them more than others. At GitHub they
have the convention that anything in the *master* branch can be
shipped at any time. 

In order to maintain the quality of code in the *master* branch all
code must be sent threw a code review prior to being merged. This is
done via a pull request. 

In general it would work like this. Alice wants to add a new feature
to an app. She will pull the most recent version of *master* from the
central repo and then create a branch for her new feature, lets call it
*writing_desk* and write her code. When she is done she will
send a pull request to Lewis from the *writing_desk* branch. 

Lewis will then review her code and send her back a pull request that
may contain any changes he thinks should be made. This may then repeat
a few times until the code is ready at which point there will be a
final commit which will include a comment something like _SHIP IT_. At
this point Alice will merge her new code back into *master*.

==== Undoing changes

If you have made a change to a file and wish to undo it for some
reason you can undo that from the command line with "git reset". You
can of course also do it from any of the graphical tools.  



==== Removing Files

Often in the course of development a file or group of files will
become irrelivent. Git of course allows you to remove the file.  To
remove a file from a git repository use *git rm filename* Then commit.
It will of course not remove the file from the history of the project,
nor from other branches.

To move a file use *git mv oldfile newfile* which will remove the old
file and add the new one, but will be able to preserve history.


=== Remote Git

What makes git so useful is that it has such wonderful features for
working with remote repositories. There are for major commands for
working with a remote repository. In this case a remote repository can
be a different directory on the same computer or on a different
computer somewhere else, or even on a thumb drive.

==== Clone

To copy a remote repository use *git clone* this will copy the
repository along with all all of its history to the local system. By
default it will clone the "master" branch. 

You should use *clone* when you want to copy a repository onto a
computer for the first time. After that you will use *pull* or *fetch*
to get the most recent versions of files. 

==== Push

If you clone a remote repository and then make changes to it you will
probably want to return those changes to that repository. To do that
use *git push* which takes changes from the local repository and
copies them to the remote repository. In order to do this you must of
course have rights to write to that repository. 

A push can not merge code, so if the advance is not a fast forward then
it will be rejected. So before you do a push you may need to do a pull.

==== Pull

A *pull* is not quite the opposite of a push. A pull will take code
from 'there' and move it to 'here'. However unlike a push a pull will
merge the code together.  By default a pull will merge code into the
current branch. In many cases it may make sense to create a throw away
branch, pull into that, do any merging that may be required then merge
it back into the development branch. 

==== Fetch
A git *fetch* is similar to a pull in that it will fetch new commits
from the remote repository. Unlike a pull a fetch will not do any kind
of merging of remote data with your current branch. 

........................................

........................................

=== Pushing and Pulling

In order to move a set of changes from one repository to another there
are two options. You can *push* or *pull* the changes. A *push* takes
the changes in the current repository and merges them into a foreign
repository, which can be on a remote computer, or just a second
directory on the same computer.

The other option is to do a *pull* which takes changes from another
repository and moves them into yours.

In both cases these operations preserve the complete history of
commits from the source repository.

In addition these operations can be be repeated. So Ann can pull
changes from Bob who has pulled changes from Charlie, the final
repository will have all three sets of changes. This is very different
from sending a patch file where there is no change history.

[[pull_request]]
=== A Pull Request

Of course if Ann is going to pull changes from Bob she needs a way to
know that she should pull his changes. If Ann and Bob are sitting next
to each other Bob may just say to Ann "Ok pull my changes" and let her
know the URL of the repository and which branch the changes are
on. You can push or pull from any local branch to any remote branch. 

However if you are more than three or four people and are not sitting
all in one place you will probably want a more formal way to do
this. To support this GitHub has created a formal idea of a "Pull
Request" which is a formal way for a user to let another user know
that there are changes to be integrated.

If Ann has changes that she wishes Bob to take into his repository via
GitHub (or bitbucket) she will go to the web site for her repository
on GitHub and then select which branch contains her changes and of
course who she wishes to send the change request too.

Bob will then be notified by GitHub that he has a pull request
pending. GitHub notifications can be configured to run over email,
threw the web site or via the API or a mobile app.

Bob will then have a chance to review the changes that Ann made and
integrate them into his three or reject them.


All of this can also be done via the GitHub API, but that is somewhat
beyond the scope of this chapter.

To illustrate let us use an example from the writing of this book. I
have published this book on GitHub and user +breskeby+ noticed a typo
in one of these files. He had forked the repository and committed his
change. You can see this in this graph. His change is the lower line
in blue.

image:pull_request/network_graph_before_merge.png[title="Branch Before
Merge"]  

After committing his changes +breskeby+ sent me a pull request with
his change. In this case you see that the change he has sent to line
3. My text is in red. While his corrected text is bellow it in green. 

image:pull_request/pull_request_diff_view.png[title="Pull Request"] 

In this case I chose to merge the changes into the text and now the
network graph looks like this. Notice that in this graph the commit
from +breskeby+ (in blue) is now in the +zkessin+ band of the graph as
those commits are now also in my repository. 

image:pull_request/network_graph_after_merge.png[title="Branch After
Merge"] 

A while latter the graph looks like this graph. Notice here that there
are further commits from me. In addition there is a new commit in
green from user +kirean+ which has not yet been merged into my
repository. 
 
image:pull_request/pull_request_later.png[title="Needs another merge"] 

If I look at the graph from +kirean's+ repository it will look like
this. There are a few things to note here. First of all his changes
are in the top band in black, while mine are bellow in blue. Secondly
the trunk up until where the two repositories diverge is shown in his
repository. Even thought I made those commits since they have been
copied into his copy of the repository they are shown there. 

image:pull_request/network_graph_kirean.png[title="Network graph from
Kirean's repository"]
