=== Working in Ad-Hoc teams


[grid="rows",format="csv"]
[options="header",cols="<s,<,<"]
|===========================
Team Members, Well Defined , *Amorphous*
Team Location, Distributed, *Co Located*
Time Frame, On Going, *Limited*
Team Size, Large, *Small*
Leadership, Formal, *Informal*
Repository Access, Public, *Private*
|===========================

At the opposite end of the spectrum from the Linux Kernel team is the
Internet cafe or hackathon session. In this case we can assume 2-4
people are going to be sitting down over a coffee or pizza to develop
something. This would also apply to an early stage startup where
people are writing code on laptops around a table, or a group of
students working on their homework. In this case we should assume that
the project will only last a few hours or a few days, so the work flow
should be informal. 

In this case the project probably does not have a formal leadership,
and planning is probably done on a whiteboard. In addition a "Pull
Request" is probably done by turning to your friend and saying "Hey
grab my code" not via a formal GitHub Pull request. (though you can do
that too if you wish). 

On the plus side you have the advantage that everyone involved is
probably in the same room and may well have known each other before
the project started. This can make the interaction between team
members simpler.

In this case a deep system like the Linux Kernel team uses makes no
sense what so ever. What we want here is a limited number of peers
each of whom can pull from the others. This can be done with the hg
server option if you are using HG, or by creating a project on GitHub
and having everyone fork it. When it comes time to integrate code it
will be as simple as doing a pull from the correct repository and
branch. 

To adapt this work flow is as easy as it could be. Create a repository
where everyone can access it then have everyone clone it. Each member
of the team will commit to his or her own repository. When features
need to be integrated changes are pushed to a repository then changes
can be shared between developers. In this case there is not a central
authoritative version of the source, as in some of the other
work flows, instead it will be up to members of the team to integrate
reasonably often and not let things get too disorganized.

This work flow also takes little or no infrastructure. Each user needs
only his own computer and a way to share repositories. This can be
done in several ways. First of all if you are using HG you can use the
built in http server with the _hg --serve_ command. If you are using
git there is not quite as easy an option, however you can use a cloud
hosting service like GitHub or even share the repositories with a file
server or dropbox.

What would probably work is to setup a repository on GitHub and give
everyone read/write access to it and push all changes there. 

What will probably be more work is knowing when you have outgrown this
workflow. At some point three guys sitting around a table with Pizza
can turn into a real company which may require other types of
work flow.

