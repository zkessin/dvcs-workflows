=== Single Developer


[grid="rows",format="csv"]
[options="header",cols="<s,<,<"]
|===========================
Team Members, *Well Defined* , Amorphous
Team Location, Distributed, *Co Located*
Time Frame, *On Going*, Limited
Team Size, Large, *Small*
Leadership, *Formal*, Informal
Repository Access, Public, *Private*
|===========================

If you are developing a project solo many of the complexities of a
group are greatly simplified, As there is only one team member she
does not need to coordinate  with team members.  fThere are two aspects
of how to work on a project solo. How to best take advantage of the
features of git such as branches and how to take best advantage of
cloud hosting.

I have found that while working solo or in a group using frequent
small branches makes life simple.  For each new feature I create a new
branch and do the development I want to do. When I have fished the
feature I merge it back into the main branch.

I tend to use Bitbucket for solo projects. Unlike GitHub Bitbucket
allows you to have have unlimited private repositories. As I don't
care about community in this case giving up GitHub's features doesn't
bother me as I am working solo.

I do however want to use a cloud host as I may be using the project
from several computes. I may wish to have access to the files from my
desktop, my laptop and a cloud server for deployment.

One reason to prefer GitHub is that many online build tools can take
advantage of the GitHub API.  SO example if I am building an
application for mobile phones with PhoneGap then I may wish to use
their API to build my application. {TODO link PhoneGap} this will
enable me to take advantage of those build tools. In that case I could
also push my changes onto the PhoneGap git archive.


NOTE: You can also use git to maintain any file or group of files that
you might wish to keep track of, including things like unix config
files such as a +.emacs.d+ directory or even a phone directory so that
you don't delete your aunt's phone number by accident.

.Using Git for config files
****************************************
If you have a complex set of configuration files on unix, which could
include things like your +.emacs.d+ and +.vim+ directories as well as
configurations for bash, screen and tmux you may with to keep them
under version control and backed up. These things take time to create
and loosing them would be a major pain in the neck. In addition you
may want to share them between several computers (home, work,
laptop). 

One easy way to do this is to copy the various files and directories
from your unix home directory to a custom subdirectory and then create
symbolic links from the home directory. The new configuration
directory can be  under version control with git or hg. In addition to
keep a backup of these files you can then push them to GitHub. 

You can also keep the directory on dropbox, but that sometimes results
in weird git errors if two computers try to update the repository at
the same time. 



****************************************
